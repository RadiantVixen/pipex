#include "pipex_bonus.h"

void	execution(char *command, char **env)
{
	char	*path;
	char	**cmd;

	path = NULL;
	cmd = ft_split(command, ' ');
	if (access(cmd[0], X_OK) == 0)
	{
		if (execve(cmd[0], cmd, env) < 0)
			ft_error("----command can't executude");
	}
	else
	{
		path = check_env(env, cmd);
		if (execve(path, cmd, env) < 0)
			ft_error("command can't executude");
	}
	free(path);
	ft_free(cmd);
}

// void	child_one(int *fd, char **av, char **env,int ac)
// {
// 	int	infile;
// 	int i;
// 	// (void)ac;
// 	i=here_doc(av,&infile);
// 	if(i==3)
// 	infile = open("../.aatki.tmp", O_RDONLY);
// 	if (infile < 0)
// 		ft_error("file can't open");
// 	while(i < ac - 2)
// 	{
// 		i=2;
// 		int id = fork();
// 		if(id==0)
// 		{
// 			if (close(fd[0]) < 0)
// 				ft_error("file can't close");
// 			if ( dup2(fd[1], 1) < 0)
// 				ft_error("can't dup");
// 			if( dup2(infile, 0) < 0)
// 				ft_error("can't dup");
// 			if (i==3)
// 				unlink("../.aatki.tmp");
// 			execution(av[i], env);
// 		}
// 		else
// 		{
// 			if (close(infile) < 0)
// 				ft_error("file can't close");
// 		}
// 		i++;
// 	}
// }

int	child_one(char **av, char **env,int ac)
{
	int	infile;
	int i;
	int ph[2];
	int fdi[2];
	int id;

	i=2;
	infile = open(av[1], O_RDONLY);
	if (infile < 0)
			ft_error("file can't open");
	fdi[0]=infile;
	// fdi[0] = fd[0];
	// if (close(infile) < 0)
	// 	ft_error("file can't close");
	while(i < ac - 2)
 	{
		
		pipe(ph);
		fdi[1]=ph[1];
		id=fork();
		if(id==0)
		{
			if(dup2(fdi[0], 0) < 0)
				ft_error("can't dup");
			if (dup2(fdi[1], 1) < 0)
				ft_error("can't dup");
			if (close(fdi[1]) < 0)
				ft_error("file can't close");
			if (close(fdi[0]) < 0)
				ft_error("file can't close");
			execution(av[i], env);
		}
		// waitpid(id, NULL, 0);
		if (close(ph[1]) < 0)
			ft_error("file can't close");
		fdi[0]=ph[0];
		i++;
	}
	// fd[1]=ph[0];
	return fdi[0];
}

void	child_two(int *fd, char **av, char **env,int ac)
{
	int	outfile;
	dprintf(1,"----------------------\n");
	// (void)env;
	outfile = open(av[ac - 1],O_CREAT |O_WRONLY| O_TRUNC , 644);
	if (outfile < 0)
		ft_error("file can't opennn");
	fd[1] = outfile;
	// if (close(fd[1]) < 0)
	// 	ft_error("file can't close");
	if (dup2(fd[1], 1) < 0)
		ft_error("can't dup");
	if (dup2(fd[0], 0) < 0)
		ft_error("can't dup");
	execution(av[ac-2], env);
	close(fd[0]);
	close(fd[1]);
	// close(outfile);
}

int	main(int ac, char **av, char **env)
{
	// int	fd[2];
	int	id;
	// int	id2;
	int fdi[2];

	if (ac >= 5)
	{
		// if (pipe(fd) < 0)
		// 	ft_error("can't pipe");
		id = fork();
		if (id < 0)
			ft_error("can't fork");
		if (id == 0)
			fdi[0]=child_one(av, env,ac);
		// id2 = fork();
		// if (id2 < 0)
		// 	ft_error("can't fork");
		// if (id2 == 0)
			child_two(fdi, av, env,ac);
		// if (close(fd[0]) < 0 || close(fd[1]) < 0)
		// 	ft_error("----file can't close");
		// fdi[1]=open()
		if (close(fdi[0]) < 0)
				ft_error("file can't close");
		if (close(fdi[1]) < 0)
			ft_error("file can't close");
		// if (close(ph[0]) < 0)
		// 	ft_error("file can't close");
		// if (close(p[0]) < 0)
		// 	ft_error("file can't close");
		waitpid(id, NULL, 0);
		// waitpid(id2, NULL, 0);
	}
}
